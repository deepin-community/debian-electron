From 9de9caa6f7c78c8d993d886f1460c4b4b22bd2c5 Mon Sep 17 00:00:00 2001
From: Levi Zim <rsworktech@outlook.com>
Date: Tue, 20 Aug 2024 05:06:47 +0200
Subject: [PATCH 1/3] Revert "Zone: Remove ZoneBackingAllocator"

This reverts commit 7448e8cacb948a7be3c7b9b84c30310786332ce0.
---
 include/v8-platform.h            | 20 ++++++++++++++++++++
 src/wasm/canonical-types.cc      |  2 +-
 src/zone/accounting-allocator.cc |  6 +++++-
 src/zone/accounting-allocator.h  |  3 +++
 4 files changed, 29 insertions(+), 2 deletions(-)

--- a/src/v8/include/v8-platform.h
+++ b/src/v8/include/v8-platform.h
@@ -1028,6 +1028,18 @@
 };
 
 /**
+ * V8 Allocator used for allocating zone backings.
+ */
+class ZoneBackingAllocator {
+ public:
+  using MallocFn = void* (*)(size_t);
+  using FreeFn = void (*)(void*);
+
+  virtual MallocFn GetMallocFn() const { return ::malloc; }
+  virtual FreeFn GetFreeFn() const { return ::free; }
+};
+
+/**
  * Observer used by V8 to notify the embedder about entering/leaving sections
  * with high throughput of malloc/free operations.
  */
@@ -1064,6 +1076,14 @@
   }
 
   /**
+   * Allows the embedder to specify a custom allocator used for zones.
+   */
+  virtual ZoneBackingAllocator* GetZoneBackingAllocator() {
+    static ZoneBackingAllocator default_allocator;
+    return &default_allocator;
+  }
+
+  /**
    * Enables the embedder to respond in cases where V8 can't allocate large
    * blocks of memory. V8 retries the failed allocation once after calling this
    * method. On success, execution continues; otherwise V8 exits with a fatal
--- a/src/v8/src/wasm/canonical-types.cc
+++ b/src/v8/src/wasm/canonical-types.cc
@@ -342,7 +342,7 @@
 }
 
 size_t TypeCanonicalizer::EstimateCurrentMemoryConsumption() const {
-  UPDATE_WHEN_CLASS_CHANGES(TypeCanonicalizer, 296);
+  UPDATE_WHEN_CLASS_CHANGES(TypeCanonicalizer, 312);
   // The storage of the canonical group's types is accounted for via the
   // allocator below (which tracks the zone memory).
   base::MutexGuard mutex_guard(&mutex_);
--- a/src/v8/src/zone/accounting-allocator.cc
+++ b/src/v8/src/zone/accounting-allocator.cc
@@ -65,7 +65,11 @@
 
 }  // namespace
 
-AccountingAllocator::AccountingAllocator() {
+AccountingAllocator::AccountingAllocator()
+    : zone_backing_malloc_(
+          V8::GetCurrentPlatform()->GetZoneBackingAllocator()->GetMallocFn()),
+      zone_backing_free_(
+          V8::GetCurrentPlatform()->GetZoneBackingAllocator()->GetFreeFn()) {
   if (COMPRESS_ZONES_BOOL) {
     v8::PageAllocator* platform_page_allocator = GetPlatformPageAllocator();
     VirtualMemory memory = ReserveAddressSpace(platform_page_allocator);
--- a/src/v8/src/zone/accounting-allocator.h
+++ b/src/v8/src/zone/accounting-allocator.h
@@ -72,6 +72,9 @@
 
   std::unique_ptr<VirtualMemory> reserved_area_;
   std::unique_ptr<base::BoundedPageAllocator> bounded_page_allocator_;
+
+  ZoneBackingAllocator::MallocFn zone_backing_malloc_ = nullptr;
+  ZoneBackingAllocator::FreeFn zone_backing_free_ = nullptr;
 };
 
 }  // namespace internal
--- a/src/v8/include/v8-fast-api-calls.h
+++ b/src/v8/include/v8-fast-api-calls.h
@@ -590,9 +590,36 @@
   v8::Isolate* isolate = nullptr;
 
   /**
+   * If the callback wants to signal an error condition or to perform an
+   * allocation, it must set options.fallback to true and do an early return
+   * from the fast method. Then V8 checks the value of options.fallback and if
+   * it's true, falls back to executing the SlowCallback, which is capable of
+   * reporting the error (either by throwing a JS exception or logging to the
+   * console) or doing the allocation. It's the embedder's responsibility to
+   * ensure that the fast callback is idempotent up to the point where error and
+   * fallback conditions are checked, because otherwise executing the slow
+   * callback might produce visible side-effects twice.
+   */
+  V8_DEPRECATED(
+      "It is not necessary to use the `fallback` flag anymore, as it is "
+      "possible now to trigger GC, throw exceptions, and call back into "
+      "JavaScript even in API functions called with a fast API call.")
+  bool fallback = false;
+
+  /**
    * The `data` passed to the FunctionTemplate constructor, or `undefined`.
    */
   v8::Local<v8::Value> data;
+
+  /**
+   * When called from WebAssembly, a view of the calling module's memory.
+   */
+  V8_DEPRECATED(
+      "The wasm memory should either be provided as a field of the receiver, "
+      "the data object of the FunctionTemplate, or as a normal parameter of "
+      "the API function. Since regular API calls don't have this magic "
+      "`wasm_memory parameter, one of the options above should be possible.")
+  FastApiTypedArray<uint8_t>* const wasm_memory = nullptr;
 };
 
 namespace internal {
--- a/src/v8/src/compiler/fast-api-calls.cc
+++ b/src/v8/src/compiler/fast-api-calls.cc
@@ -364,9 +364,15 @@
     // If this check fails, you've probably added new fields to
     // v8::FastApiCallbackOptions, which means you'll need to write code
     // that initializes and reads from them too.
-    static_assert(kSize == sizeof(uintptr_t) * 2);
+    static_assert(kSize == sizeof(uintptr_t) * 4);
     stack_slot = __ StackSlot(kSize, kAlign);
 
+    __ Store(
+        StoreRepresentation(MachineRepresentation::kWord32, kNoWriteBarrier),
+        stack_slot,
+        static_cast<int>(offsetof(v8::FastApiCallbackOptions, fallback)),
+        __ Int32Constant(0));
+
     __ Store(StoreRepresentation(MachineType::PointerRepresentation(),
                                  kNoWriteBarrier),
              stack_slot,
@@ -415,11 +421,25 @@
   Node* fast_call_result = convert_return_value_(c_signature, c_call_result);
 
   auto merge = __ MakeLabel(MachineRepresentation::kTagged);
-  __ Goto(&if_success);
+  if (c_signature->HasOptions()) {
+    DCHECK_NOT_NULL(stack_slot);
+    Node* load = __ Load(
+        MachineType::Int32(), stack_slot,
+        static_cast<int>(offsetof(v8::FastApiCallbackOptions, fallback)));
+
+    Node* is_zero = __ Word32Equal(load, __ Int32Constant(0));
+    __ Branch(is_zero, &if_success, &if_error);
+  } else {
+    __ Goto(&if_success);
+  }
 
-  // We need to generate a fallback (both fast and slow call) in case
-  // the generated code might fail, in case e.g. a Smi was passed where
-  // a JSObject was expected and an error must be thrown
+  // We need to generate a fallback (both fast and slow call) in case:
+  // 1) the generated code might fail, in case e.g. a Smi was passed where
+  // a JSObject was expected and an error must be thrown or
+  // 2) the embedder requested fallback possibility via providing options arg.
+  // None of the above usually holds true for Wasm functions with primitive
+  // types only, so we avoid generating an extra branch here.
+  DCHECK_IMPLIES(c_signature->HasOptions(), if_error.IsUsed());
   if (if_error.IsUsed()) {
     // Generate direct slow call.
     __ Bind(&if_error);
--- a/src/v8/src/compiler/turboshaft/fast-api-call-lowering-reducer.h
+++ b/src/v8/src/compiler/turboshaft/fast-api-call-lowering-reducer.h
@@ -87,7 +87,7 @@
         // If this check fails, you've probably added new fields to
         // v8::FastApiCallbackOptions, which means you'll need to write code
         // that initializes and reads from them too.
-        static_assert(kSize == sizeof(uintptr_t) * 2);
+        static_assert(kSize == sizeof(uintptr_t) * 4);
         stack_slot = __ StackSlot(kSize, kAlign);
 
         // isolate
@@ -96,11 +96,19 @@
             __ ExternalConstant(ExternalReference::isolate_address()),
             MemoryRepresentation::UintPtr(),
             offsetof(v8::FastApiCallbackOptions, isolate));
+        // fallback = 0
+        __ StoreOffHeap(stack_slot, __ Word32Constant(0),
+                        MemoryRepresentation::Int32(),
+                        offsetof(v8::FastApiCallbackOptions, fallback));
         // data = data_argument
         OpIndex data_argument_to_pass = __ AdaptLocalArgument(data_argument);
         __ StoreOffHeap(stack_slot, data_argument_to_pass,
                         MemoryRepresentation::UintPtr(),
                         offsetof(v8::FastApiCallbackOptions, data));
+        // wasm_memory = 0
+        __ StoreOffHeap(stack_slot, __ IntPtrConstant(0),
+                        MemoryRepresentation::UintPtr(),
+                        offsetof(v8::FastApiCallbackOptions, wasm_memory));
 
         args.push_back(stack_slot);
         builder.AddParam(MachineType::Pointer());
@@ -128,6 +136,13 @@
       V<Object> fast_call_result =
           ConvertReturnValue(c_signature, c_call_result);
 
+      if (c_signature->HasOptions()) {
+        DCHECK(stack_slot.valid());
+        V<Word32> error = __ LoadOffHeap(
+            stack_slot, offsetof(v8::FastApiCallbackOptions, fallback),
+            MemoryRepresentation::Int32());
+        GOTO_IF(error, handle_error);
+      }
       GOTO(done, FastApiCallOp::kSuccessValue, fast_call_result);
       BIND(trigger_exception);
       __ template CallRuntime<
--- a/src/v8/src/compiler/wasm-compiler.cc
+++ b/src/v8/src/compiler/wasm-compiler.cc
@@ -8345,7 +8345,45 @@
         [](const CFunctionInfo* signature, Node* c_return_value) {
           return c_return_value;
         },
-        [](Node* options_stack_slot) {},
+        // Initialize wasm-specific callback options fields
+        [this](Node* options_stack_slot) {
+          Node* mem_start;
+          Node* mem_size;
+          if (module_->memories.empty()) {
+            mem_start = gasm_->UintPtrConstant(0);
+            mem_size = gasm_->UintPtrConstant(0);
+          } else if (module_->memories.size() == 1) {
+            mem_start = LOAD_INSTANCE_FIELD_NO_ELIMINATION(
+                Memory0Start, MachineType::Pointer());
+            mem_size = LOAD_INSTANCE_FIELD_NO_ELIMINATION(
+                Memory0Size, MachineType::UintPtr());
+          } else {
+            FATAL(
+                "Fast API does not support multiple memories yet "
+                "(https://crbug.com/v8/14260)");
+          }
+
+          START_ALLOW_USE_DEPRECATED()
+          constexpr int kSize = sizeof(FastApiTypedArray<uint8_t>);
+          constexpr int kAlign = alignof(FastApiTypedArray<uint8_t>);
+          END_ALLOW_USE_DEPRECATED()
+
+          Node* stack_slot = gasm_->StackSlot(kSize, kAlign);
+
+          gasm_->Store(StoreRepresentation(MachineType::PointerRepresentation(),
+                                           kNoWriteBarrier),
+                       stack_slot, 0, mem_size);
+          gasm_->Store(StoreRepresentation(MachineType::PointerRepresentation(),
+                                           kNoWriteBarrier),
+                       stack_slot, sizeof(size_t), mem_start);
+
+          gasm_->Store(StoreRepresentation(MachineType::PointerRepresentation(),
+                                           kNoWriteBarrier),
+                       options_stack_slot,
+                       static_cast<int>(
+                           offsetof(v8::FastApiCallbackOptions, wasm_memory)),
+                       stack_slot);
+        },
         // Generate fallback slow call if fast call fails
         [this, callable_node, native_context, receiver_node]() -> Node* {
           int wasm_count = static_cast<int>(sig_->parameter_count());

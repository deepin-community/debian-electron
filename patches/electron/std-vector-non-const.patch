Index: src/chrome/browser/process_singleton.h
===================================================================
--- src.orig/chrome/browser/process_singleton.h
+++ src/chrome/browser/process_singleton.h
@@ -102,7 +102,7 @@ class ProcessSingleton {
   using NotificationCallback =
        base::RepeatingCallback<bool(const base::CommandLine& command_line,
                                    const base::FilePath& current_directory,
-                                   const std::vector<const uint8_t> additional_data)>;
+                                   const std::vector<uint8_t> additional_data)>;
 
 #if BUILDFLAG(IS_WIN)
   ProcessSingleton(const std::string& program_name,
Index: src/chrome/browser/process_singleton_posix.cc
===================================================================
--- src.orig/chrome/browser/process_singleton_posix.cc
+++ src/chrome/browser/process_singleton_posix.cc
@@ -607,7 +607,7 @@ class ProcessSingleton::LinuxWatcher
   // |reader| is for sending back ACK message.
   void HandleMessage(const std::string& current_dir,
                      const std::vector<std::string>& argv,
-                     const std::vector<const uint8_t> additional_data,
+                     const std::vector<uint8_t> additional_data,
                      SocketReader* reader);
 
  private:
@@ -664,7 +664,7 @@ void ProcessSingleton::LinuxWatcher::Sta
 void ProcessSingleton::LinuxWatcher::HandleMessage(
     const std::string& current_dir,
     const std::vector<std::string>& argv,
-    const std::vector<const uint8_t> additional_data,
+    const std::vector<uint8_t> additional_data,
     SocketReader* reader) {
   DCHECK(ui_task_runner_->BelongsToCurrentThread());
   DCHECK(reader);
Index: src/electron/shell/browser/api/electron_api_app.cc
===================================================================
--- src.orig/electron/shell/browser/api/electron_api_app.cc
+++ src/electron/shell/browser/api/electron_api_app.cc
@@ -523,10 +523,10 @@ bool NotificationCallbackWrapper(
     const base::RepeatingCallback<
         void(const base::CommandLine& command_line,
              const base::FilePath& current_directory,
-             const std::vector<const uint8_t> additional_data)>& callback,
+             const std::vector<uint8_t> additional_data)>& callback,
     const base::CommandLine& cmd,
     const base::FilePath& cwd,
-    const std::vector<const uint8_t> additional_data) {
+    const std::vector<uint8_t> additional_data) {
   // Make sure the callback is called after app gets ready.
   if (Browser::Get()->is_ready()) {
     callback.Run(cmd, cwd, std::move(additional_data));
@@ -1102,7 +1102,7 @@ std::string App::GetLocaleCountryCode()
 
 void App::OnSecondInstance(const base::CommandLine& cmd,
                            const base::FilePath& cwd,
-                           const std::vector<const uint8_t> additional_data) {
+                           const std::vector<uint8_t> additional_data) {
   v8::Isolate* isolate = JavascriptEnvironment::GetIsolate();
   v8::HandleScope handle_scope(isolate);
   v8::Local<v8::Value> data_value =
Index: src/electron/shell/browser/api/electron_api_app.h
===================================================================
--- src.orig/electron/shell/browser/api/electron_api_app.h
+++ src/electron/shell/browser/api/electron_api_app.h
@@ -194,7 +194,7 @@ class App : public ElectronBrowserClient
   std::string GetSystemLocale(gin_helper::ErrorThrower thrower) const;
   void OnSecondInstance(const base::CommandLine& cmd,
                         const base::FilePath& cwd,
-                        const std::vector<const uint8_t> additional_data);
+                        const std::vector<uint8_t> additional_data);
   bool HasSingleInstanceLock() const;
   bool RequestSingleInstanceLock(gin::Arguments* args);
   void ReleaseSingleInstanceLock();
